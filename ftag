#!/usr/bin/env zsh

############################################################################
#    Author: Lucas Burns                                                   #
#     Email: burnsac@me.com                                                #
#   Created: 2021-06-14 20:45                                              #
#   Description: Fzf TUI for jdberry's tagging on macOS                    #
############################################################################

# == Setup == [[[
emulate -LR zsh
builtin setopt extendedglob typesetsilent
# localoptions noksharrays noshortloops warncreateglobal

0="${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/$0}"
local prog prog_dir
prog="${0:A:t}"
prog_dir="${0:A:h}"

# TODO: add support for skim
# TODO: does query need to be =query?
# TODO: add support for file paths with spaces
# Set query as optional args to prevent errors
local -A opts
zparseopts -D -A opts h -help s -skim b -boxes c -lolcat t -toilet -\
    l -local z -zoxide j -jump a -all \
    p:=opts -path:=opts q::=query -query::=query w+=wtag -wutag+=wtag

# zparseopts
zmodload -Fa zsh/zutil b:zparseopts \
  || Ftag::error "zsh/zutil is required to use this program"
# ${commands[@]} array
zmodload -Fa zsh/parameter p:commands \
  || Ftag::error "zsh/parameter is requred to use this program"
# tput $COLUMNS
zmodload zsh/terminfo 2>/dev/null
zmodload zsh/termcap 2>/dev/null
# ]]]

# == Functions: Helper == [[[
function Ftag::warning() { builtin print -Pu2 "%F{3}[Warning]%f: $*"; return 1; }
function Ftag::error() { builtin print -Pu2 "%F{1}[Error]%f: $*"; exit 1; }
# Check dependencies, if -e, then throw error
function Ftag::dep() {
  local -a opts
  zparseopts -a opts -D ${(s::):-e}
  if (( ${+opts[(r)-e]} )); then
    (( ${+commands[$1]} )) || Ftag::error "%F{2}$1%f is not in PATH"
  else
    (( ${+commands[$1]} ))
  fi
}
function Ftag::opts() { (( ${+opts[-${${(@s. .)@}[1]}]} || ${+opts[--${${(@s. .)@}[2]}]} )); }
function Ftag::is_git() { command git -C "${(z)@}" rev-parse --is-inside-work-tree; }

# TODO: use this or no?
function Ftag::declare() {
  typeset -p "${@}" &>/dev/null; local exists=$?
  # Returns > 0 if exists
  (( exists != 0 )) && {
    readonly "${@}"
    return 0
  }
  return 1
}

# TODO: use this or no?
function Ftag::copy() {
  if Ftag::dep "pbcopyy" ; then ftag_copy="pbcopy"
  elif Ftag::dep "xclip" ; then ftag_copy="xclip -sel primary"
  elif Ftag::dep "xsel"  ; then ftag_copy="xsel -p"
  fi
}

# TODO: add option to permanently set notifications
function OS::notify() { osascript -e 'display notification "'"$*"'"'; }

# TODO: look into named pipes
function Ftag::cleanup() {
  rm -f $current_filter
  return 0
}
# ]]]

# == Functions: Actions == [[[
function Ftag::zoxide() {
  _ZO_FZF_OPTS="$FZF_DEFAULT_OPTS --prompt ' Zoxide Tag> '" zoxide query -i
}

function Ftag::autojump() {
  autojump -s | tac | awk 'NR>7{print $2}' | fzf --prompt ' Jump Tag> '
}

# TODO: create a prompt to switch paths
function Ftag::path::find() {
  tag -tf '*' $FZFTAG_PATH | fzf --prompt ' Path> '
  # builtin cd -q "$FZFTAG_PATH" && \
    # tag -el $FZFTAG_PATH | fzf --prompt ' Path> '
}

function Ftag::gitui() {
  # gitui -d "${(z)@}" - Freezes -- could add grv
  if Ftag::dep "lazygit"; then lazygit -p "${(z)@}"
  elif Ftag::dep "tig"; then tig -C "${(z)@}"
  fi
}

function Ftag::wutag() {
  # Arguments: $1 = directory; $2 = filename; $3 = tag
  local -a opts
  zparseopts -a opts -D ${(s::):-sar}
  if (( ${+opts[(r)-s]} )); then
    # set
    wutag -d "${1}/" clear "$2"
    wutag -d "${1}/" set "$2" "$3"
  elif (( ${+opts[(r)-a]} )); then
    # add
    wutag -d "${1}/" set "$2" "$3"
  elif (( ${+opts[(r)-r]} )); then
    # remove
    wutag -d "${1}/" clear "$2"
  fi
}

function Ftag::boxes() {
  (( ${+commands[boxes]} )) && boxes -d tex-box || {
    cat; Ftag::warning "'boxes' is required to use this feature"
  }
}
function Ftag::lolcat() {
  (( ${+commands[lolcat]} )) && lolcat || {
    cat; Ftag::warning "'lolcat' is required to use this feature"
  }
}
function Ftag::toilet() {
  # smblock smmono12
  (( ${+commands[toilet]} )) && toilet -f smmono12 -F border --filter gay "${(j. .)@}" || {
    cat; Ftag::warning "'toilet' is required to use this feature"
  }
}

function Ftag::RG() {
   # TODO: add options to fzf
  local RG_PREFIX INITIAL_QUERY
  local -a selected opts
  RG_PREFIX="rg --column --hidden --line-number --no-heading --color=always --smart-case "
  INITIAL_QUERY="${*:-}"
  selected=("$(
    FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY' || true" \
      fzf --bind "change:reload:$RG_PREFIX {q} || true" \
        --ansi --disabled --query "$INITIAL_QUERY" \
        --delimiter : \
        --bind 'ctrl-e:execute($EDITOR "$(echo {} | cut -d: -f1)" >/dev/tty </dev/tty)' \
        --bind='ctrl-y:execute-silent(echo {+} | cut -d: -f1 | pbcopy)' \
        --preview 'bat --style=numbers,header,changes,snip --color=always --highlight-line {2} {1}' \
        --preview-window 'default:right:60%:~1:+{2}+3/2:border-left'
  )")
  selected=( ${(@s.:.)selected} )
  [[ -n "${selected[1]}" ]] && ${EDITOR} "${selected[1]}" "+${selected[2]}"
}

function Ftag::gpg() {
  local -a mime opts
  local tmpfile
  zparseopts -a opts -D ${(s::):-e}
  # zmodload -Fa zsh/files b:zf_rm # TODO: use?
  trap "rm -f $tmpfile" EXIT SIGINT SIGTERM
  tmpfile="${TMPDIR:-/tmp}/ftag.dump.$RANDOM"
  mime=(${(@s./.)${(f)$(file --mime-type --brief "${(z)@}")}})
  matched=${(M)mime[@]:#(#i)*pgp-encrypted*}
  # Prevent adding armor if user prefers binary encryption
  # If encrypted and edit
  if [[ -n "${matched}" ]] && (( ${+opts[(r)-e]} )) {
    gpg -dq "${(z)@}" > "$tmpfile"
    "${EDITOR:-vim}" "$tmpfile"
    gpg -eq "$tmpfile"
    [[ -f "${tmpfile}.asc" ]] && mv "${tmpfile}.asc" "${(z)@}"
    [[ -f "${tmpfile}.gpg" ]] && mv "${tmpfile}.gpg" "${(z)@}"
    rm -f "$tmpfile"
  # If encrypted, decrypt it
  } elif [[ -n "${matched}" ]] {
    gpg -dq "${(z)@}" > "$tmpfile"
    mv "$tmpfile" "${(z)@}"
  # If decrypted and edit
  } elif [[ -z "${matched}" ]] && (( ${+opts[(r)-e]} )) {
    "${EDITOR:-vim}" "${(z)@}"
  # If decrypted, encrypt it
  } else {
    gpg -eq "${(z)@}"
    [[ -f "${(z)@}.asc" ]] && mv "${(z)@}.asc" "${(z)@}"
    [[ -f "${(z)@}.gpg" ]] && mv "${(z)@}.gpg" "${(z)@}"
  }
}

function Ftag::twf() {
  local -a opts
  local prev file
  prev=${${(M)ftag_pager:#bat*}:-cat}
  zparseopts -a opts -D ${(s::):-es}
  if (( ${+opts[(r)-e]} )); then
    file=$(twf -dir "${(z)@}" -previewCmd "${prev} {}")
    [[ -n "$file" ]] && ${EDITOR:-vim} "$file"
  # TODO: use or delete
  elif (( ${+ots[(r)-s]} )); then
    twf -dir "${(z)@}" -previewCmd "${prev} {}"
  fi
}

function Ftag::dua() {
  if Ftag::dep "dua"; then
    dua i "$@"
  elif Ftag::dep "ncdu"; then
    ncdu "$@"
  else
    return 1
  fi
}

# TODO: figure out how to source & add this for everyone
function Ftag::forgit() {
  local -A forgit_cmds
  forgit_cmds[add]="forgit::add"
  forgit_cmds[log]="forgit::log"
  forgit_cmds[diff]="forgit::diff"
  forgit_cmds[ignore]="forgit::ignore"
  forgit_cmds[reset_HEAD_file]="forgit::reset::head"
  forgit_cmds[checkout_file]="forgit::checkout::file"
  forgit_cmds[checkout_branch]="forgit::checkout::branch"
  forgit_cmds[checkout_commit]="forgit::checkout::commit"
  forgit_cmds[clean]="forgit::clean"
  forgit_cmds[stash]="forgit::stash::show"
  forgit_cmds[cherry-pick]="forgit::cherry::pick"
  forgit_cmds[rebase_i]="forgit::rebase"
  forgit_cmds[fixup]="forgit::fixup"
  local reply wfxr
  wfxr=${(@f)$(whence -va forgit::log)}
  [[ -f "$wfxr" ]] && builtin source "$wfxr"

  if [[ -n "$ZINIT" ]]; then
    if [[ -f "${ZINIT[PLUGINS_DIR]}/wfxr---forgit/forgit.plugin.zsh" ]]; then
      builtin source "${ZINIT[PLUGINS_DIR]}/wfxr---forgit/forgit.plugin.zsh"
    elif [[ -f "${ZINIT[HOME_DIR]}/plugins/wfxr---forgit/forgit.plugin.zsh" ]]; then
      builtin source "${ZINIT[HOME_DIR]}/plugins/wfxr---forgit/forgit.plugin.zsh"
    fi
  elif [[ -n "$ZDOTDIR" ]]; then
    # ??
    if [[ -f "${ZDOTDIR}/ohmyzsh/custom/plugins/wfxr-forgit/forgit.plugin.zsh" ]]; then
      builtin source "${ZDOTDIR}/ohmyzsh/custom/plugins/wfxr-forgit/forgit.plugin.zsh"
    fi
  fi

  reply=$(print -rl "${(@k)forgit_cmds}" | fzf)
  [[ -n "$reply" ]] && eval "${functions[$forgit_cmds[$reply]]}"
}

function Ftag::dotbare() {
  # If dir is git use dotbare in that dir; else use on dotfiles
  # Brings up own interactive menu
  local -a choice action
  Ftag::dep "dotbare" || return 1
  if [[ $(Ftag::is_git "$@") ]]; then
    setopt localoptions noautopushd
    builtin cd -q "$@"
    choice=( ${(@f)"$(dotbare)"} )
    action=( ${(@z)choice[1]} )
    final=${action[$(( ${action[(I)dotbare]} + 1 ))]}
    dotbare --git "$final"
  else
    choice=( ${(@f)"$(dotbare)"} )
    action=( ${(@z)choice[1]} )
    final=${action[$(( ${action[(I)dotbare]} + 1 ))]}
    dotbare "$final"
  fi
}

# FIXME: get to work
functions Ftag::glow() {
  integer mdfiles
  builtin cd -q "$@"
  terminal-notifier -title "here1" -message "x"
  mdfiles=$(command ls *.md | wc -l)
  (( lsfiles > 0 )) && glow
}
# ]]]

# == Functions: Formatting and Display == [[[
function Ftag::default_header() {
  local -a fig; integer max color; local -A opts
  zparseopts -D -- s:=opts c::=color
  fig=( "${(@f)$(figlet ${(v)opts[(e)-s]} )}" )
  max=${#${(On)fig}[1]}
  print -nPr "%F{${${color/-c/}:-2}}"
  print -lr -- "${(l:(( (COLUMNS+max)/2 )):: :)fig[@]}"
  print -Prn "%f"
  print -Pr -- "%F{1}${(l:COLUMNS::=:):-}%f"
}

function Ftag::parse_format() {
  # Toilet:
  if (( FZFTAG_TOILET )); then
    if (( FZFTAG_LOLCAT )); then
      if (( FZFTAG_BOXES )); then
        Ftag::toilet "${(j. .)@}" | Ftag::boxes | Ftag::lolcat
      else
        Ftag::toilet "${(j. .)@}" | Ftag::lolcat          # tc
      fi
    else
      Ftag::toilet "${(j. .)@}"                      # t
    fi
  # Figlet:
  elif (( FZFTAG_LOLCAT )); then
      if (( FZFTAG_BOXES )); then
        $figlet "${(j. .)@}" | Ftag::boxes | Ftag::lolcat # cb
      else
        $figlet "${(j. .)@}" | Ftag::lolcat          # c
      fi
  elif (( FZFTAG_BOXES )); then
      $figlet "${(j. .)@}" | Ftag::boxes             # b
  else
    Ftag::default_header -s "${(j. .)@}" -c 2         # default
  fi
}

function Ftag::usage() {
  Ftag::default_header -s "ftag" -c 13
  print -P -- "%F{12}%BUSAGE:%b%f"
  print -P -- "\t%F{14}ftag%f %F{13} [wsh]%f %F{2}<tag>%f"
  print -P -- "\t%F{2}ftag%f is an FZF TUI for jdberry's %F{2}tag%f on macOS"
  print -P -- "\tIt uses 'figlet' by default to display headers, though it is not needed"
  print -P -- "\t%F{2}<tag>%f is optional argument, and if used, it must be exact. There"
  print -P -- "\tare zsh completions to complete tags. For a fuzzy search, use the %F{2}-q%f flag"
  print -P -- "%F{12}%BFLAGS:%b%f"
  print -P -- "\t%F{2}-w%f,%F{2}--wutag%f\t\tAlso tag files with %F{3}wutag%f (%F{2}-ww%f only uses wutag)"
  print -P -- "\t%F{2}-q%f,%F{2}--query <query>%f\tStart fzf with a query"
  print -P -- "\t%F{2}-z%f,%F{2}--zoxide%f\t\tUse %F{3}zoxide%f to select directory to use tags (only shows tagged files)"
  print -P -- "\t%F{2}-j%f,%F{2}--jump%f\t\tUse %F{3}autojump%f to select directory to use tags (only shows tagged files)"
  # print -P -- "\t%F{2}-s%f,%F{2}--skim%f\tUse skim instead of fzf"
  print -P -- "\t%F{2}-h%f,%F{2}--help%f\t\tDisplay this help message"
  print -P -- "%F{12}%BFORMAT:%b%f"
  print -P -- "\t%F{2}-b%f,%F{2}--boxes%f\t\tAdd a box around header with %F{3}boxes%f"
  print -P -- "\t%F{2}-c%f,%F{2}--lolcat%f\t\tColor the header with %F{3}lolcat%f"
  print -P -- "\t%F{2}-t%f,%F{2}--toilet%f\t\tColor and format header with %F{3}toilet%f"
  print -P -- "\t%F{2}-l%f,%F{2}--local%f\t\tUse %F{3}tags%f in local directory"
  print -P -- "\tThe above flags can be used in any combination. Figlet is ran if toilet isn't"
  print -P -- "\tspecified and vice-versa. Although figlet doesn't have a flag, it is ran by default."
  print -P -- "\tThe default printing (no flags specified and figlet installed) looks the nicest."
  print -P -- "%F{12}%BINSIDE FZF:%b%f"
  Ftag::show_keys
}

function Ftag::show_keys() {
  print -P -- "\t%F{2}A%f\tAdd/append tags\t%F{14}ACTION_ADD%f"
  print -P -- "\t%F{2}S%f\tSet tags (overwrites)\t%F{14}ACTION_SET%f"
  print -P -- "\t%F{2}D%f\tDelete/remove tags\t%F{14}ACTION_REMOVE%f"
  print -P -- "\t%F{2}R%f\tReload the tag search\t%F{14}ACTION_RELOAD%f"
  print -P -- "\t%F{2}U%f\tShow tag usage\t%F{14}ACTION_USAGE%f"
  print -P -- "\t%F{2}E%f\tEdit selected tags with \$EDITOR\t%F{14}ACTION_EDIT%f"
  print -P -- "\t%F{2}F%f\tOpen directory with file manager in which tagged file resides\t%F{14}ACTION_FILEMANAGER%f"
  print -P -- "\t%F{2}Ctrl-w%f\tOpen directory with %F{3}glow%f if dir contains markdown files\t%F{14}ACTION_GLOW%f"
  print -P -- "\t%F{2}I%f\tOpen %F{3}gitui%f/%F{3}lazygit%f if directory is a git-dir\t%F{14}ACTION_GIT%f"
  print -P -- "\t%F{2}L%f\tSwitch to local mode (i.e., current directory)\t%F{14}ACTION_LOCAL%f"
  print -P -- "\t%F{2}G%f\tSwitch to global mode (i.e., default mode/all tags on file system)\t%F{14}ACTION_GLOBAL%f"
  print -P -- "\t%F{2}Z%f\tSwitch to %F{3}zoxide%f query (i.e., select dir and list tags)\t%F{14}ACTION_ZOXIDE%f"
  print -P -- "\t%F{2}J%f\tSwitch to %F{3}autojump%f query (i.e., select dir and list tags)\t%F{14}ACTION_AUTOJUMP%f"
  print -P -- "\t%F{2}Ctrl-e%f\tEdit a %F{3}gpg%f-encrypted file\t%F{14}ACTION_GPG_EDIT%f"
  print -P -- "\t%F{2}Ctrl-g%f\tEncrypt or decrypt a file with %F{3}gpg%f. If encrypted, decrypt and vice versa\t%F{14}ACTION_GPG%f"
  print -P -- "\t%F{2}Ctrl-d%f\tOpen directory in %F{3}dua%f interactive mode\t%F{14}ACTION_DUA%f"
  print -P -- "\t%F{2}Ctrl-t%f\tOpen directory in %F{3}twf%f to edit file\t%F{14}ACTION_TWF_EDIT%f"
  print -P -- "\t%F{2}Ctrl-r%f\tOpen directory in %F{3}rg%f interactive search\t%F{14}ACTION_RIPGREP%f"

  print -P -- "\t%F{2}Ctrl-f%f\tIf git-dir, open %F{3}forgit%f to select action\t%F{14}ACTION_FORGIT%f"
  print -P -- "\t%F{2}Ctrl-b%f\tIf git-dir, open %F{3}dotbare%f to select action\t%F{14}ACTION_DOTBARE%f"
  print -P -- "\t%F{2}Ctrl-n%f\tOpen directory in finder\t%F{14}ACTION_FINDER%f"

  print -P -- "\t%F{2}P%f\tToggle preview of file or directory\t%F{14}ACTION_PREVIEW%f"
  print -P -- "\t%F{2}V%f\tToggle %F{3}bat%f to view file (requires %F{3}bat%f)\t%F{14}ACTION_VIEW%f"
  print -P -- "\t%F{2}Ctrl-y%f\tCopy the file or directory\t%F{14}ACTION_COPY%f"
  print -P -- "\t%F{2}Q%f\tQuit fzf\t%F{14}ACTION_QUIT%f"
  print -P -- "\t%F{2}?%f\tShow keys\t%F{14}ACTION_HELP%f"
  Ftag::env_vars
}

function Ftag::env_vars() {
  print -P -- "%F{12}%BENVIRONMENT VARIABLES:%b%f"
  print -P -- "\t%F{5}FTAG_PAGER%f\tPager to view file in or usage (default: %F{2}bat%f, %F{2}less%f)"
  print -P -- "\t%F{5}FTAG_COPY%f\tCopy command to copy path to clipboard (default: %F{2}pbcopy%f)"
  print -P -- "\t%F{5}FTAG_MODIFIER%f\tModifier to bind with fzf (default: %F{3}ctrl%f)"
  print -P -- "\t%F{5}FTAG_FMANAGER%f\tFile manager to open when using '%F{3}F%f' in fzf (default: %F{2}lf%f, %F{2}ranger%f, %F{2}xplr%f)"
  print -P -- "\t%F{5}FTAG_FILE_PREV%f\tFzf preview for files (default: %F{2}bat%f)"
  print -P -- "\t%F{5}FTAG_DIR_PREV%f\tFzf preview for directories (default: %F{2}exa%f)"
}
# ]]]

# == Setting Variables == [[[
typeset -gH FZFTAG_QUERY
FZFTAG_QUERY=${${(v)opts[(I)(-q|--query)]}:-}  # fzf query
export FZFTAG_QUERY

typeset -gH FZFTAG_PATH
FZFTAG_PATH=${${(v)opts[(I)(-p|--path)]}:-}  # search path
export FZFTAG_PATH

typeset -g +h LESS
local space
space="[[:space:]]#"
# Prevent -r from being added twice; -F prevents paging if less than screen size
LESS=${(j. .)${${(@)${(s: :)LESS}}//(${~space}-r${~space}|${~space}-F${~space})/}}
export LESS="-r $LESS"

Ftag::opts "h help" && Ftag::usage && exit 0

local boxes lolcat toilet figlet
Ftag::dep -e "tag"
Ftag::dep "figlet" && figlet="figlet" || figlet="cat"
# ]]]

# == Config == [[[
local ftag_fmanager ftag_pager
ftag_pager=${FTAG_PAGER:-${commands[bat]:-less}}
[[ $ftag_pager == */bat ]] && ftag_pager="bat --paging=always -f"
ftag_fmanager=${FTAG_FMANAGER:-${commands[lf]:-${commands[ranger]:-${commands[xplr]}}}}
ftag_modifier=${FTAG_MODIFIER:-ctrl}
ftag_copy=${FTAG_COPY:-pbcopy}

readonly TTY_REDIRECTION="< /dev/tty > /dev/tty 2>&1"
readonly FTAG_PRINT="+print-query"
readonly FTAG_RELOAD="+reload(env _FZFTAG_INTERNAL=reload $prog)"
readonly FTAG_CHPROMPT="+change-prompt"

readonly ACTION_ADD="execute(env FZFTAG_ACTION=add $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_SET="execute(env FZFTAG_ACTION=set $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_EDIT="execute(env FZFTAG_ACTION=edit $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_REMOVE="execute(env FZFTAG_ACTION=remove $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_USAGE="execute(env FZFTAG_ACTION=usage $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_TEST="execute(env FZFTAG_ACTION=test $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_FILEMANAGER="execute(env FZFTAG_ACTION=file-manager $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_GIT="execute(env FZFTAG_ACTION=git $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_GPG_EDIT="execute(env FZFTAG_ACTION=gpg-edit $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_GPG="execute(env FZFTAG_ACTION=gpg $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_DUA="execute(env FZFTAG_ACTION=dua $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_TWF_EDIT="execute(env FZFTAG_ACTION=twf-edit $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_RIPGREP="execute(env FZFTAG_ACTION=ripgrep $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_FORGIT="execute(env FZFTAG_ACTION=forgit $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_DOTBARE="execute(env FZFTAG_ACTION=dotbare $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_FINDER="execute(env FZFTAG_ACTION=open-finder $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_GLOW="execute(env FZFTAG_ACTION=glow $prog {+f} ${(z)TTY_REDIRECTION})${(z)FTAG_PRINT}"
readonly ACTION_LOCAL="execute(env FZFTAG_STATE_CHANGE=local $prog )${(z)FTAG_RELOAD}${FTAG_CHPROMPT}( Local Tag> )"
readonly ACTION_GLOBAL="execute(env FZFTAG_STATE_CHANGE=global $prog )${(z)FTAG_RELOAD}${FTAG_CHPROMPT}( Global Tag> )"
readonly ACTION_ZOXIDE="execute(env FZFTAG_STATE_CHANGE=zoxide $prog )${(z)FTAG_RELOAD}${FTAG_CHPROMPT}( Zoxide Tag> )"
readonly ACTION_AUTOJUMP="execute(env FZFTAG_STATE_CHANGE=autojump $prog )${(z)FTAG_RELOAD}${FTAG_CHPROMPT}( Jump Tag> )"
readonly ACTION_COPY="execute-silent(echo {1} | ${(z)ftag_copy} )"
readonly ACTION_VIEW="execute(bat --style=header,snip -f --paging=always {1} )"
readonly ACTION_RELOAD="reload(env _FZFTAG_INTERNAL=reload $prog)"
readonly ACTION_PREVIEW="toggle-preview"
readonly ACTION_HELP="execute(env _FZFTAG_SHOW=keys $prog | ${(z)ftag_pager} )${(z)FTAG_PRINT}"
readonly ACTION_QUIT="abort"

# TODO: use or remove
readonly ACTION_TWF_SWITCH="execute(env FZFTAG_STATE_CHANGE=twf-switch $prog )${(z)FTAG_RELOAD}${FTAG_CHPROMPT}(TWF Tag>)"

# TODO: create page explaining fzf executes to allow these
typeset -gA FZFTAG_KEYBINDINGS
: ${FZFTAG_KEYBINDINGS[A]:=$ACTION_ADD}
: ${FZFTAG_KEYBINDINGS[S]:=$ACTION_SET}
: ${FZFTAG_KEYBINDINGS[E]:=$ACTION_EDIT}
: ${FZFTAG_KEYBINDINGS[D]:=$ACTION_REMOVE}
: ${FZFTAG_KEYBINDINGS[U]:=$ACTION_USAGE}
: ${FZFTAG_KEYBINDINGS[T]:=$ACTION_TEST}
: ${FZFTAG_KEYBINDINGS[F]:=$ACTION_FILEMANAGER}
: ${FZFTAG_KEYBINDINGS[I]:=$ACTION_GIT}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-b]:=$ACTION_DOTBARE}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-e]:=$ACTION_GPG_EDIT}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-g]:=$ACTION_GPG}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-d]:=$ACTION_DUA}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-t]:=$ACTION_TWF_EDIT}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-r]:=$ACTION_RIPGREP}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-n]:=$ACTION_FINDER}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-w]:=$ACTION_GLOW}
: ${FZFTAG_KEYBINDINGS[L]:=$ACTION_LOCAL}
: ${FZFTAG_KEYBINDINGS[G]:=$ACTION_GLOBAL}
: ${FZFTAG_KEYBINDINGS[Z]:=$ACTION_ZOXIDE}
: ${FZFTAG_KEYBINDINGS[J]:=$ACTION_AUTOJUMP}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-y]:=${(z)ACTION_COPY}}
: ${FZFTAG_KEYBINDINGS[V]:=$ACTION_VIEW}
: ${FZFTAG_KEYBINDINGS[R]:=$ACTION_RELOAD}
: ${FZFTAG_KEYBINDINGS[P]:=$ACTION_PREVIEW}
: ${FZFTAG_KEYBINDINGS[Q]:=$ACTION_QUIT}
: ${FZFTAG_KEYBINDINGS[?]:=$ACTION_HELP}

: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-f]:=$ACTION_FORGIT}
: ${FZFTAG_KEYBINDINGS[${ftag_modifier}-s]:=$ACTION_TWF_SWITCH}

typeset -a FZFTAG_ACTIONS
FZFTAG_ACTIONS=( ${(@)${(k)FZFTAG_KEYBINDINGS//(#m)*/\-\-bind=$MATCH:${FZFTAG_KEYBINDINGS[$MATCH]}}} )
# ]]]

# == Create Filter == [[[
# File path content marks how to execute next command in the main loop
local current_filter
current_filter=${XDG_RUNTIME_DIR:-${XDG_CACHE_DIR:-${TMP-/tmp}}}/tag-filter
if ! touch $current_filter; then
  echo "${prog}: Can't create a marker file needed for internal state management." >&2
fi
# ]]]

# == Actions == [[[
# Keys to show within the TUI
if [[ "${_FZFTAG_SHOW}" = "keys" ]]; then
  Ftag::default_header -s "ftag keybindings" -c 5
  local header
  local -a keys
  # Not sure how to put this in array as one element other than this, it reads as 3
  header=$(print -P "%F{9}KEY%f\t%F{13}ACTION%f\t%F{11}FZFTAG_ACTION%f")
  line=$(print -P "%F{9}===%f\t%F{13}======%f\t%F{11}=============%f")
  keys=($header $line)
  keys+=( ${(@)${(f)"$(Ftag::show_keys)"}/$'\t'/} )
  print -rl -- $keys | column -ts $'\t'
  # print -rl -- ${(@)${(f)"$(Ftag::show_keys)"}/$'\t'/} | column -ts $'\t'
  exit 0
fi

# FIXME: try and use this instead of awk
# declare -a input; input=($@)
# print -l "${input[@]/(#b)([^\/]##\/)##([^\/]##)*/${match[3]}}"

# TODO: actions: delete file
# TODO: Add another case statement for opening files
# TODO: Add mdcat/mdv/glow/etc
if [[ -n "$FZFTAG_ACTION" ]]; then
  clear
  # Get the filename
  tag_args="$(awk '{print $1}' $@)"
  [[ -f $tag_args ]] || echo 'Not a file'
  case "$FZFTAG_ACTION" in
    test)
      # Testing for development
      Ftag::parse_format "test"
      vared -cp "Set tags for ${tag_args:t3}: " tag
      ;;
    set)
      local fname fdir tag file
      Ftag::parse_format "set tags"
      vared -cp "Set tags for ${tag_args:t3}: " tag
      for file in "${(f)tag_args[@]}"; do
        # Wutag only works if variables are set first
        fname="${file:t}" fdir="${file:h}"
        # Wutag is called in addition unless -ww
        if (( FZFTAG_WTAG > 1 )) {
          Ftag::wutag -s "$fdir" "$fname" "$tag"
        } elif (( FZFTAG_WTAG == 1 )) {
          tag --set "${tag}" "$file"
          Ftag::wutag -s "$fdir" "$fname" "$tag"
        } else {
          tag --set "${tag}" "$file"
        }
      done
      ;;
    add)
      local fname fdir tag file
      Ftag::parse_format "add tags"
      vared -cp "Add tags for ${tag_args:t3}: " tag
      for file in "${(f)tag_args[@]}"; do
        fname="${file:t}" fdir="${file:h}"
        if (( FZFTAG_WTAG > 1 )) {
          Ftag::wutag -a "$fdir" "$fname" "$tag"
        } elif (( FZFTAG_WTAG == 1 )) {
          tag --add "${tag}" "$file"
          Ftag::wutag -a "$fdir" "$fname" "$tag"
        } else {
          tag --add "${tag}" "$file"
        }
      done
      ;;
    remove)
      local fname fdir tag file
      Ftag::parse_format "remove tags"
      vared -cp "Remove tags for ${tag_args:t3}: " tag
      for file in "${(f)tag_args[@]}"; do
        fname="${file:t}" fdir="${file:h}"
        if (( FZFTAG_WTAG > 1 )) {
          Ftag::wutag -r "$fdir" "$fname"
        } elif (( FZFTAG_WTAG == 1 )) {
          tag --remove "${tag}" "$file"
          Ftag::wutag -r "$fdir" "$fname"
        } else {
          tag --remove "${tag}" "$file"
        }
      done
      ;;
    ripgrep)
      local fname fdir yesno keyw
      Ftag::parse_format "ripgrep search"
      vared -cp "Local [Y/n]: " yesno
      vared -cp "Ripgrep keyword: " keyw
      [[ "$yesno" == (#i)n ]] && {
        () {
            setopt localoptions noautopushd
            builtin cd -q "${tag_args:h}"
            Ftag::RG "$keyw"
          };
        } || Ftag::RG "$keyw"
      ;;
    usage)
      tag --usage | ${(z)lpager}
      ;;
    edit)
      ${EDITOR:-vim} "$tag_args"
      ;;
    file-manager)
      $ftag_fmanager "${tag_args:h}"
      ;;
    git)
      Ftag::is_git "${tag_args:h}" >/dev/null || return 1
      Ftag::gitui "${tag_args:h}"
      ;;
    forgit)
      Ftag::is_git "${tag_args:h}" >/dev/null || return 1
      Ftag::forgit
      ;;
    dotbare)
      Ftag::dotbare "${tag_args:h}"
      # dotbare --git "${tag_args:h}"
      # Ftag::is_git "${tag_args:h}" || return 1
      # cd -q "${tag_args:h}" && dotbare --git
      # dotbare flog | bat
      ;;
    gpg-edit)
      Ftag::gpg -e "$tag_args"
      ;;
    gpg)
      Ftag::gpg "$tag_args"
      ;;
    dua)
      Ftag::dua "${tag_args:h}"
      ;;
    twf-edit)
      Ftag::dep "twf" && Ftag::twf -e "${tag_args:h}"
      ;;
    open-finder)
      open "${tag_args:h}" && exit 0
      ;;
    glow)
      Ftag::glow "${tag_args:h}"
      ;;
  esac
  clear
  print -Pr -- "%F{1}${(l:COLUMNS::=:):-}%f"
  print "End of 'ftag "$FZFTAG_ACTION"' output. Press any key to continue"
  print -Pr -- "%F{1}${(l:COLUMNS::=:):-}%f"
  read
  exit $?
fi
# ]]]

# == State Change == [[[
local FZFTAG_CMD dir_switch
if [[ -n "$FZFTAG_STATE_CHANGE" ]]; then
  case "$FZFTAG_STATE_CHANGE" in
    local)
      FZFTAG_CMD="-l"
      ;;
    global)
      FZFTAG_CMD="-tf *"
      ;;
    path)
      dir_switch=$(Ftag::path::find)
      FZFTAG_CMD="-tf * ${(q)dir_switch}"
      ;;
    zoxide)
      dir_switch=$(Ftag::zoxide)
      FZFTAG_CMD="-tf * ${(q)dir_switch}"
      ;;
    autojump)
      dir_switch=$(Ftag::autojump)
      FZFTAG_CMD="-tf * ${(q)dir_switch}"
      ;;
  esac

  echo "$FZFTAG_CMD" > $current_filter
  exit
fi
# ]]]

# == Reload == [[[
local filter
if [[ -n "$_FZFTAG_RELOAD" ]]; then
  filter="$(<$current_filter)"
  output="$(tag ${(z)filter} | column -ts $'\t')"

  if [[ -n "$output" ]]; then
    echo "$output"
  else
    echo "No tags were found: $filter"
  fi
  exit
fi
# ]]]

# == Remove Filter == [[[
# No state change, no action, and no reload, remove filter
if [[ -z "${FZFTAG_STATE_CHANGE+1}" ]] && [[ -z "${FZFTAG_ACTION+1}" ]] && [[ "${_FZFTAG_INTERNAL}" != "reload" ]]; then
  rm -f "$current_filter"
fi
# ]]]

# == Main Loop == [[[
# Variables have to be exported to be picked up on the next iteration of the loop
typeset -giH FZFTAG_WTAG FZFTAG_BOXES FZFTAG_LOLCAT FZFTAG_TOILET
typeset -gH  FZFTAG_STATE_CHANGE
while (( $? != 130 )); do

  if Ftag::opts "w wutag"; then
    if Ftag::dep "wutag"; then
      if (( $#wtag > 1 )) {
        export FZFTAG_WTAG=2
      } else {
        export FZFTAG_WTAG=1
      }
    else
      Ftag::warning "%F{2}wutag%f is not in PATH
      Install %F{2}wutag%f or don't use %F{2}-w%f,%F{2}--wutag%f'"
    fi
  fi

  Ftag::opts "b boxes"  && export FZFTAG_BOXES=1
  Ftag::opts "c lolcat" && export FZFTAG_LOLCAT=1
  Ftag::opts "t toilet" && export FZFTAG_TOILET=1

  local tag_arguments
  # If writeable, that means theres a state change
  if [[ -w "$current_filter" ]]; then
    tag_arguments="$(<$current_filter)"
  else
  # First time ran
    if Ftag::opts "l local"; then
      tag_arguments="-l"
    elif Ftag::opts "p path"; then
      tag_arguments="-tf * $FZFTAG_PATH"
    elif Ftag::opts "z zoxide"; then
      Ftag::dep -e "zoxide"
      dir_switch=$(Ftag::zoxide)
      tag_arguments="-tf * $dir_switch"
    elif Ftag::opts "j jump"; then
      Ftag::dep -e "autojump"
      dir_switch=$(Ftag::autojump)
      tag_arguments="-tf * $dir_switch"
    else
      # Don't quote *
      tag_arguments="-tf ${@:-*}"
    fi
    echo "$tag_arguments" >! $current_filter
  fi

  # TODO: pickup with-nth on reload
  # Set initial prompt
  local -a FZFTAG_OPTS
  if Ftag::opts "l local" || [[ "$FZFTAG_STATE_CHANGE" == "local" ]]; then
    FZFTAG_OPTS=( "--prompt ' Local Tag> '" )
  elif Ftag::opts "p path" || [[ "$FZFTAG_STATE_CHANGE" == "path" ]]; then
    FZFTAG_OPTS=( "--prompt ' Path> '" )
  elif Ftag::opts "z zoxide" || [[ "$FZFTAG_STATE_CHANGE" == "zoxide" ]]; then
    FZFTAG_OPTS=( "--prompt ' Zoxide Tag> '" )
  elif Ftag::opts "j jump" || [[ "$FZFTAG_STATE_CHANGE" == "autojump" ]]; then
    FZFTAG_OPTS=( "--prompt ' Jump Tag> '" )
  else
    # FZFTAG_OPTS=( "--prompt 'Tag> '" "--delimiter /" "--with-nth 4.." )
    FZFTAG_OPTS=( "--prompt 'Tag> '" )
  fi

  if [[ "${_FZFTAG_INTERNAL}" == "reload" ]]; then
    tag "${(z)tag_arguments}" | column -t
    exit $?
  fi

  local FILE_PREV DIR_PREV
  local ftag_file_prev ftag_dir_prev
  ftag_file_prev=${FTAG_FILE_PREV:-bat --style=numbers --color=always}
  ftag_dir_prev=${FTAG_DIR_PREV:-exa -TL 3}
  FILE_PREV="([[ -f {1} ]] && $ftag_file_prev {1})"
  DIR_PREV="([[ -d {1} ]] && $ftag_dir_prev {1} | less)"
  # TODO: add a header and column separator
  tag "${(z)tag_arguments}" \
    | column -t \
    | fzf \
    ${${(z)${(j. .)FZFTAG_OPTS}}//\'} \
    --ansi \
    --query "$FZFTAG_QUERY" \
    --multi \
    --info=inline \
    --pointer '➤' \
    --preview-window=':hidden,right:60%' \
    --preview "$FILE_PREV || $DIR_PREV" \
    "${FZFTAG_ACTIONS[@]}"
done
# ]]]

# vim: ft=zsh:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:
